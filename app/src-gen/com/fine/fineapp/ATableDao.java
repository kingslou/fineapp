package com.fine.fineapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fine.fineapp.data.bean.ATable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATABLE".
*/
public class ATableDao extends AbstractDao<ATable, Long> {

    public static final String TABLENAME = "ATABLE";

    /**
     * Properties of entity ATable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Guid = new Property(0, Long.class, "guid", true, "GUID");
        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
        public final static Property Status = new Property(2, Integer.class, "status", false, "STATUS");
        public final static Property Bak1 = new Property(3, String.class, "bak1", false, "BAK1");
        public final static Property Bak2 = new Property(4, String.class, "bak2", false, "BAK2");
        public final static Property CreatedAt = new Property(5, java.util.Date.class, "createdAt", false, "CREATED_AT");
    };


    public ATableDao(DaoConfig config) {
        super(config);
    }
    
    public ATableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATABLE\" (" + //
                "\"GUID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: guid
                "\"TEXT\" TEXT," + // 1: text
                "\"STATUS\" INTEGER," + // 2: status
                "\"BAK1\" TEXT," + // 3: bak1
                "\"BAK2\" TEXT," + // 4: bak2
                "\"CREATED_AT\" INTEGER);"); // 5: createdAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATABLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ATable entity) {
        stmt.clearBindings();
 
        Long guid = entity.getGuid();
        if (guid != null) {
            stmt.bindLong(1, guid);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(3, status);
        }
 
        String bak1 = entity.getBak1();
        if (bak1 != null) {
            stmt.bindString(4, bak1);
        }
 
        String bak2 = entity.getBak2();
        if (bak2 != null) {
            stmt.bindString(5, bak2);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(6, createdAt.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ATable readEntity(Cursor cursor, int offset) {
        ATable entity = new ATable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // guid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // text
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bak1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bak2
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // createdAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ATable entity, int offset) {
        entity.setGuid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBak1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBak2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreatedAt(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ATable entity, long rowId) {
        entity.setGuid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ATable entity) {
        if(entity != null) {
            return entity.getGuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
